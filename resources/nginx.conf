#########
# NGINX configuration
#
# CORE MODULE - https://nginx.org/en/docs/ngx_core_module.html
# HTTP MODULE - https://nginx.org/en/docs/http/ngx_http_core_module.html
# HTTP PROXY MODULE - https://nginx.org/en/docs/http/ngx_http_proxy_module.html
# HTTPS SERVERS - https://nginx.org/en/docs/http/configuring_https_servers.html
#########

# User & group used by worker processes by starting NGINX. If group is omitted, a group whose name equals that of user is used.
user www-data;
worker_processes 2;
# Add more modules
# include /etc/nginx/modules-enabled/*.conf;
# Destination of Process ID file
pid /run/nginx.pid;
# Changes the limit on the maximum number of open files for worker processes.
worker_rlimit_nofile 16384;

# The “events” context is used to set global options that affect how NGINX handles connections at a general level
events {
	# Maximum number of simultaneous/parallel connections that can be opened by a worker process
	worker_connections 1024;
	# If "off", a worker process will only accept one new connection at a time
	multi_accept on;
	# Set to "on" if nginx worker_processes > 1, else set to "off"
	accept_mutex on;
	# Use “edge-triggered notification” instead of long polling
	use epoll;
}

# The “http” context will contain all of the directives and other contexts necessary to define how NGINX will handle HTTP(S) connections
http {

	#########
	# Basic Settings
	# @see http://nginx.org/en/docs/http/ngx_http_core_module.html
	#########

	# Allows sending files
	sendfile on;
	# If on, allows sending the response header and the beginning of a file in one packet
	tcp_nopush on;
	# Allows WebSocket proxying
	tcp_nodelay on;
	# Limits the maximum time during which requests can be processed through one keep-alive connection
	keepalive_timeout 65s;
	# Sets the maximum size of the types hash tables
	types_hash_max_size 2048;
	# Disable emitting NGINX version in the "Server" response header field
	server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Production (Encryption)

	#########
	# Global SSL/TLS Settings
	#########

	# ssl_certificate /etc/nginx/ssl/official.crt;
	# ssl_certificate_key /etc/nginx/ssl/official.key;

	# Remember SSL/TLS handshake for 10 minutes
	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 10m;

	# If SSL/TLS is active, then only allow versions 1.2 & 1.3. Because it's 2024...
	ssl_protocols TLSv1.3 TLSv1.2;

	# Prefer ciphers which have no known vulnerabilities
	ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;
	ssl_prefer_server_ciphers on;

	#########
	# Global Logging Settings
	#########

	#  NGINX logging
	# Logging levels: debug, info, notice, warn, error, crit, alert, emerg
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log info;

	#########
	# Gzip Settings
	#########

	gzip off;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	#########
	# Virtual hosts
	#########

	# Over UNIX sockets
	upstream web_asgi_sock {
		server unix:/run/daphne/daphne.sock fail_timeout=0;
	}

	# Over HTTP
	upstream web_asgi_http {
		# Connect to the 'daphne' service (@see "compose.yml") on port 8000
		server daphne:8000 fail_timeout=0;
		# NOTE: Keepalive makes only sense for HTTP 1.1. If your using HTTP 2.0+, you don't need this!
		keepalive 64;
	}

	server {
		# Development (unencrypted)
		listen 80 deferred;
		listen [::]:80 deferred;
		# Production (encrypted)
		# listen 443 ssl http2 deferred;
		# listen [::]:443 ssl http2 deferred;

		# Development
		server_name             127.0.0.1 localhost;
		# Production (Placeholder with imaginary company: ACME Inc.)
		# server_name             localhost acme.com www.acme.com *.acme.com;

		# Specific logging for this virtual host
		# Logging levels: debug, info, notice, warn, error, crit, alert, emerg
		access_log              /var/log/nginx/daphne_access.log;
		error_log               /var/log/nginx/daphne_error.log info;

		# Production (encrypted)
		# ssl_certificate       /etc/nginx/ssl/official.crt;
		# ssl_certificate_key   /etc/nginx/ssl/official.key;

		client_max_body_size    4G;
		keepalive_timeout       60s;

		# Serve static files directly
		location /static/ {
			# NOTE: Static files do never change, therefore index them
			autoindex on;
			alias /var/daphne/static/;
		}

		# Serve/Receive media files directly
		location /media/ {
			# NOTE: Media files do change, because users upload/download stuff... Indexing here is a case to case decision...
			autoindex off;
			alias /var/daphne/media/;
		}

		# Forward WebSocket requests (every websocket URL starts with "/ws/..." in its path)
		location /ws/ {
			# ATTENTION: If you change from HTTP to UNIX (or vice versa) also change the "run-daphne.py" file
			# Over UNIX sockets
			proxy_pass          http://web_asgi_sock/ws/;
			# Over HTTP
			# proxy_pass          http://web_asgi_http/ws/;

			proxy_http_version  1.1;
			proxy_set_header    Upgrade $http_upgrade;
			proxy_set_header    Connection "upgrade";
			proxy_redirect      off;
			proxy_set_header    Host $host;
			proxy_set_header    X-Forwarded-Proto $scheme;
			proxy_set_header    X-Real-IP $remote_addr;
			proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header    X-Forwarded-Host $server_name;

			# NOTE: Additional encryption is only necessary if you proxy-passing to another HTTP socket. In other words: UNIX sockets don't need any additional encryption
			# Continue data transfer to application with other encryption
			# proxy_ssl_certificate           /etc/nginx/ssl/daphne.crt;
			# proxy_ssl_certificate_key       /etc/nginx/ssl/daphne.key;
			# proxy_ssl_protocols             TLSv1.3;

			# NOTE: Verification is only necessary when using wildcard certificates
			# proxy_ssl_trusted_certificate   /etc/nginx/ssl/ca-root.pem;
			# proxy_ssl_ciphers               HIGH:!aNULL:!MD5;
			# proxy_ssl_verify		          on;
			# proxy_ssl_verify_depth          2;
		}

		# Forward HTTP requests
		location / {
			# ATTENTION: If you change from HTTP to UNIX (or vice versa) also change the "run-daphne.py" file
			# Over UNIX sockets
			proxy_pass            http://web_asgi_sock;
			# Over HTTP
			# proxy_pass          http://web_asgi_http;

			# Pass the original host from the end users client on to Daphne/Django (@see https://docs.djangoproject.com/en/5.1/ref/settings/#use-x-forwarded-host)
			# proxy_set_header      X-Forwarded-Host  $host;
			# Pass the original port from the end users client on to Daphne/Django (@see https://docs.djangoproject.com/en/5.1/ref/settings/#use-x-forwarded-port)
			# proxy_set_header      X-Forwarded-Port $server_port;
			proxy_set_header      Host $host;
			proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header      X-Forwarded-Proto $scheme;
			proxy_redirect        off;

			# NOTE: Additional encryption is only necessary if you proxy-passing to another HTTP socket. In other words: UNIX sockets don't need any additional encryption
			# Continue data transfer to application with other encryption
			# proxy_ssl_certificate           /etc/nginx/ssl/daphne.crt;
			# proxy_ssl_certificate_key       /etc/nginx/ssl/daphne.key;
			# proxy_ssl_protocols             TLSv1.3;

			# NOTE: Verification is only necessary when using wildcard certificates
			# proxy_ssl_trusted_certificate   /etc/nginx/ssl/ca-root.pem;
			# proxy_ssl_ciphers               HIGH:!aNULL:!MD5;
			# proxy_ssl_verify		          on;
			# proxy_ssl_verify_depth          2;
		}
	}
}
